[gd_scene load_steps=13 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode specular_toon;

uniform sampler2D noise;
uniform float height_scale = 0.5;
uniform sampler2D normalmap;

varying vec2 vertex_position;

void vertex() {
	float height = texture(noise, VERTEX.xz / 2.0).r;
	VERTEX.y += height * height_scale;
	vertex_position = VERTEX.xz / 2.0;
}

void fragment(){
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	
	NORMALMAP = texture(normalmap, vertex_position).xyz;
	
	METALLIC = 0.0;
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);
	
	RIM = 0.2;
}




"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
as_normalmap = true
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/height_scale = 0.27
shader_param/noise = SubResource( 3 )
shader_param/normalmap = SubResource( 5 )

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
render_mode specular_toon;

uniform sampler2D noise;
uniform float height_scale = 0.5;

varying vec2 vertex_position;

float wave(vec2 position, float power){
	position += texture(noise, position / 10.0).x * 2.0 - 1.0;
	vec2 wv = 1.0 - abs(sin(position));
	return pow(1.0 - pow(wv.x * wv.y, 0.65), power);
}

float height(vec2 position, float time) {
	// Issue created about here, https://github.com/godotengine/godot-docs/issues/2847

//	vec2 offset = 0.01 * cos(position + time);
//	return texture(noise, (position / 10.0) - offset).x;
//	float h = wave(position*0.4);

	float d = wave((position + time) * 0.4, 8.0) * 0.3;
	d += wave((position - time) * 0.3, 8.0) * 0.3;
	d += wave((position + time) * 0.5, 4.0) * 0.2;
	d += wave((position - time) * 0.6, 4.0) * 0.2;
	return d;
}

void vertex() {
	vec2 pos = VERTEX.xz;
	float k = height(pos, TIME);
	VERTEX.y = k;
	
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}

void fragment(){
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));	
	
	METALLIC = 0.0;
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);
	
	RIM = 0.2;
}




"

[sub_resource type="OpenSimplexNoise" id=9]

[sub_resource type="NoiseTexture" id=10]
noise = SubResource( 9 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 8 )
shader_param/height_scale = 0.5
shader_param/noise = SubResource( 10 )

[sub_resource type="PlaneMesh" id=12]
material = SubResource( 11 )
subdivide_width = 32
subdivide_depth = 32

[node name="First Spatial Shader Part2" type="Spatial"]

[node name="Water1" type="MeshInstance" parent="."]
visible = false
mesh = SubResource( 7 )
material/0 = null

[node name="Water2" type="MeshInstance" parent="."]
mesh = SubResource( 12 )
material/0 = null

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.24767, 0 )
